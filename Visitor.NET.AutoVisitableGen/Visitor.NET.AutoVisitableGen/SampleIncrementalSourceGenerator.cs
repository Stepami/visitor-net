using System.Collections.Immutable;
using System.Linq;
using System.Text;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using Microsoft.CodeAnalysis.Text;

namespace Visitor.NET.AutoVisitableGen;

/// <summary>
/// A sample source generator that creates a custom report based on class properties. The target class should be annotated with the 'Generators.ReportAttribute' attribute.
/// When using the source code as a baseline, an incremental source generator is preferable because it reduces the performance overhead.
/// </summary>
//[Generator]
public class SampleIncrementalSourceGenerator// : IIncrementalGenerator
{
    private const string Namespace = "Visitor.NET";
    private const string AttributeName = "AutoVisitableAttribute";

    private const string AttributeSourceCode = $@"// <auto-generated/>

namespace {Namespace};
                   
[System.AttributeUsage(System.AttributeTargets.Class)]
public class {AttributeName}<T> : System.Attribute
    where T : IVisitable<T>
{{
}}
";

    public void Initialize(IncrementalGeneratorInitializationContext context)
    {
        // Add the marker attribute to the compilation.
        context.RegisterPostInitializationOutput(ctx => ctx.AddSource(
            $"{AttributeName}.g.cs",
            SourceText.From(AttributeSourceCode, Encoding.UTF8)));

        // Filter classes annotated with the [Report] attribute. Only filtered Syntax Nodes can trigger code generation.
        var provider = context.SyntaxProvider
            .CreateSyntaxProvider(
                (s, _) => s is TypeDeclarationSyntax { AttributeLists.Count: > 0 } candidate
                              and not InterfaceDeclarationSyntax &&
                candidate.Modifiers.Any(SyntaxKind.PublicKeyword) &&
                candidate.Modifiers.Any(SyntaxKind.PartialKeyword) &&
                !candidate.Modifiers.Any(SyntaxKind.StaticKeyword),
                (ctx, _) => GetTypeDeclarationForSourceGen(ctx))
            .Where(t => t.reportAttributeFound)
            .Select((t, _) => t.Item1);

        // Generate the source code.
        context.RegisterSourceOutput(context.CompilationProvider.Combine(provider.Collect()),
            ((ctx, t) => GenerateCode(ctx, t.Left, t.Right)));
    }

    /// <summary>
    /// Checks whether the Node is annotated with the [Report] attribute and maps syntax context to the specific node type (ClassDeclarationSyntax).
    /// </summary>
    /// <param name="context">Syntax context, based on CreateSyntaxProvider predicate</param>
    /// <returns>The specific cast and whether the attribute was found.</returns>
    private static (TypeDeclarationSyntax, bool reportAttributeFound) GetTypeDeclarationForSourceGen(
        GeneratorSyntaxContext context)
    {
        var typeDeclarationSyntax = (TypeDeclarationSyntax)context.Node;

        // Go through all attributes of the class.
        foreach (var attributeSyntax in typeDeclarationSyntax.AttributeLists.SelectMany(attributeListSyntax => attributeListSyntax.Attributes))
        {
            if (ModelExtensions.GetSymbolInfo(context.SemanticModel, attributeSyntax).Symbol is not IMethodSymbol attributeSymbol)
                continue; // if we can't get the symbol, ignore it

            if (typeDeclarationSyntax is InterfaceDeclarationSyntax)
                continue;

           // if (typeDeclarationSyntax.)

            string attributeName = attributeSymbol.ContainingType.ToDisplayString();

            // Check the full name of the [Report] attribute.
            if (attributeName == $"{Namespace}.{AttributeName}")
                return (typeDeclarationSyntax, true);
        }

        return (typeDeclarationSyntax, false);
    }

    /// <summary>
    /// Generate code action.
    /// It will be executed on specific nodes (ClassDeclarationSyntax annotated with the [Report] attribute) changed by the user.
    /// </summary>
    /// <param name="context">Source generation context used to add source files.</param>
    /// <param name="compilation">Compilation used to provide access to the Semantic Model.</param>
    /// <param name="typeDeclarations">Nodes annotated with the [Report] attribute that trigger the generate action.</param>
    private void GenerateCode(SourceProductionContext context, Compilation compilation,
        ImmutableArray<TypeDeclarationSyntax> typeDeclarations) 
    {
        // Go through all filtered class declarations.
        foreach (var typeDeclarationSyntax in typeDeclarations)
        {
            // We need to get semantic model of the class to retrieve metadata.
            var semanticModel = compilation.GetSemanticModel(typeDeclarationSyntax.SyntaxTree);

            // Symbols allow us to get the compile-time information.
            if (ModelExtensions.GetDeclaredSymbol(semanticModel, typeDeclarationSyntax) is not INamedTypeSymbol classSymbol)
                continue;

            var namespaceName = classSymbol.ContainingNamespace.ToDisplayString();

            // 'Identifier' means the token of the node. Get class name from the syntax node.
            var typeName = typeDeclarationSyntax.Identifier.Text;

            // Build up the source code
            var code = $@"// <auto-generated/>

using Visitor.NET;

namespace {namespaceName};

partial class {typeName}
{{
}}
";

            // Add the source code to the compilation.
            context.AddSource($"{typeName}.g.cs", SourceText.From(code, Encoding.UTF8));
        }
    }
}