using System.Collections.Immutable;
using System.Linq;
using System.Text;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using Microsoft.CodeAnalysis.Text;

namespace Visitor.NET.AutoVisitableGen;

[Generator]
public class AutoVisitableIncrementalSourceGenerator : IIncrementalGenerator
{
    private const string AttributeSourceCode = @"// <auto-generated/>

namespace Visitor.NET;
                   
[System.AttributeUsage(System.AttributeTargets.Class)]
public class AutoVisitableAttribute<T> : System.Attribute
    where T : IVisitable<T>
{
}
";

    public void Initialize(IncrementalGeneratorInitializationContext context)
    {
        context.RegisterPostInitializationOutput(ctx => ctx.AddSource(
            "AutoVisitableAttribute.g.cs",
            SourceText.From(AttributeSourceCode, Encoding.UTF8)));

        var provider = context.SyntaxProvider
            .ForAttributeWithMetadataName("Visitor.NET.AutoVisitableAttribute`1",
                static (s, _) => IsSyntaxTargetForGeneration(s),
                static (ctx, _) => GetTypeDeclarationForSourceGen(ctx))
            .Where(static x => x is not null)
            .Select(static (x, _) => x!);

        context.RegisterImplementationSourceOutput(provider.Collect(), GenerateCode);
    }


    private static VisitableInfo? GetTypeDeclarationForSourceGen(
        GeneratorAttributeSyntaxContext context)
    {
        var visitable = (TypeDeclarationSyntax)context.TargetNode;

        var typedArgument = GetAttributeTypedArgument(context);
        if (typedArgument is null)
        {
            return null;
        }

        var visitableNamespace = GetNamespaceName(context.TargetSymbol);
        var typedArgumentNamespace = GetNamespaceName(typedArgument);

        var typedArgumentName = string.Equals(typedArgumentNamespace, visitableNamespace)
            ? typedArgument.Name
            : typedArgument.ToDisplayString();

        var kind = GetTypeKind(visitable);
        if (kind is null)
        {
            return null;
        }

        var visitableName = visitable.Identifier.Text;

        return new VisitableInfo(
            kind.Value,
            typedArgumentName,
            visitableName,
            visitableNamespace);
    }

    private static bool IsSyntaxTargetForGeneration(SyntaxNode node) =>
        node is TypeDeclarationSyntax candidate &&
        candidate.Modifiers.Any(SyntaxKind.PublicKeyword) &&
        candidate.Modifiers.Any(SyntaxKind.PartialKeyword) &&
        !candidate.Modifiers.Any(SyntaxKind.StaticKeyword);

    private static TypeKind? GetTypeKind(TypeDeclarationSyntax typeDeclarationSyntax)
    {
        return typeDeclarationSyntax switch
        {
            ClassDeclarationSyntax => TypeKind.Class,
            RecordDeclarationSyntax => TypeKind.Record,
            _ => null
        };
    }

    private static string? GetNamespaceName(ISymbol contextTargetSymbol)
    {
        return contextTargetSymbol.ContainingNamespace.IsGlobalNamespace
            ? null
            : contextTargetSymbol.ContainingNamespace.ToDisplayString();
    }

    private static ITypeSymbol? GetAttributeTypedArgument(GeneratorAttributeSyntaxContext context)
    {
        var attributeData = context.Attributes.FirstOrDefault(x =>
            x.AttributeClass?.OriginalDefinition.ToString() == "Visitor.NET.AutoVisitableAttribute<T>");
        return attributeData?.AttributeClass?.TypeArguments.FirstOrDefault();
    }

    private static void GenerateCode(
        SourceProductionContext context,
        ImmutableArray<VisitableInfo> visitableInfos)
    {
        foreach (var (typeKind, baseTypeName, visitableTypeName, typeNamespace) in visitableInfos)
        {
            var namespacePart = typeNamespace is null
                ? string.Empty
                : $"namespace {typeNamespace};";

            var code = $@"// <auto-generated/>

using Visitor.NET;

{namespacePart}

public partial {typeKind.ToString().ToLower()} {visitableTypeName} :
    IVisitable<{visitableTypeName}>
{{
    public override TReturn Accept<TReturn>(
        IVisitor<{baseTypeName}, TReturn> visitor) =>
        Accept(visitor);

    public TReturn Accept<TReturn>(
        IVisitor<{visitableTypeName}, TReturn> visitor) =>
        visitor.Visit(this);
}}
";

            context.AddSource(
                $"{visitableTypeName}.g.cs",
                SourceText.From(code, Encoding.UTF8));
        }
    }
}

internal record VisitableInfo(
    TypeKind Kind,
    string BaseTypeName,
    string TypeName,
    string? NamespaceName);

internal enum TypeKind
{
    Class,
    Record
}