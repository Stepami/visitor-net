using System.Collections.Generic;

namespace Visitor.NET.AutoVisitableGen.Tests;

public static class MultipleNestedDerivedTypeTestData
{
    public const string INPUT_CODE_TWO_LELVEL_NEST = @"using Visitor.NET;

namespace MyNamespace;

public partial class MyClassLevelTwo
{
    public abstract partial record BinaryTreeNode : IVisitable<BinaryTreeNode>
    {
        [AutoVisitable<BinaryTreeNode>]
        public partial record Number(double Value) : BinaryTreeNode;

        public abstract TReturn Accept<TReturn>(IVisitor<BinaryTreeNode, TReturn> visitor);
    }
}
";

    public const string EXPECTED_CODE_TWO_LELVEL_NEST = @"// <auto-generated/>

using Visitor.NET;

namespace MyNamespace;

public partial class MyClassLevelTwo
{
    public partial record BinaryTreeNode
    {
        public partial record Number :
            IVisitable<Number>
        {
            public override TReturn Accept<TReturn>(
                IVisitor<BinaryTreeNode, TReturn> visitor) =>
                Accept(visitor);

            public TReturn Accept<TReturn>(
                IVisitor<Number, TReturn> visitor) =>
                visitor.Visit(this);
        }
    }
}
";


    public const string INPUT_CODE_THREE_LEVEL_NEST = @"
using Visitor.NET;

namespace MyNamespace;

public partial class MyClassLevelTree
{
    public partial class MyClassLevelTwo
    {
        public abstract partial record BinaryTreeNode : IVisitable<BinaryTreeNode>
        {
            [AutoVisitable<BinaryTreeNode>]
            public partial record Number(double Value) : BinaryTreeNode;

            public abstract TReturn Accept<TReturn>(IVisitor<BinaryTreeNode, TReturn> visitor);
        }
    }
}";

    public const string EXPECTED_CODE_THREE_LEVELS_NEST = @"// <auto-generated/>

using Visitor.NET;

namespace MyNamespace;

public partial class MyClassLevelTree
{
    public partial class MyClassLevelTwo
    {
        public partial record BinaryTreeNode
        {
            public partial record Number :
                IVisitable<Number>
            {
                public override TReturn Accept<TReturn>(
                    IVisitor<BinaryTreeNode, TReturn> visitor) =>
                    Accept(visitor);

                public TReturn Accept<TReturn>(
                    IVisitor<Number, TReturn> visitor) =>
                    visitor.Visit(this);
            }
        }
    }
}
";
    
    public const string INPUT_CODE_FOUR_LEVEL_NEST = @"
using Visitor.NET;

namespace MyNamespace;

public partial class MyClassLevelFour
{
    public partial class MyClassLevelTree
    {
        public partial class MyClassLevelTwo
        {
            public abstract partial record BinaryTreeNode : IVisitable<BinaryTreeNode>
            {
                [AutoVisitable<BinaryTreeNode>]
                public partial record Number(double Value) : BinaryTreeNode;

                public abstract TReturn Accept<TReturn>(IVisitor<BinaryTreeNode, TReturn> visitor);
            }
        }
    }
}";

    public const string EXPECTED_CODE_FOUR_LEVELS_NEST = @"// <auto-generated/>

using Visitor.NET;

namespace MyNamespace;

public partial class MyClassLevelFour
{
    public partial class MyClassLevelTree
    {
        public partial class MyClassLevelTwo
        {
            public partial record BinaryTreeNode
            {
                public partial record Number :
                    IVisitable<Number>
                {
                    public override TReturn Accept<TReturn>(
                        IVisitor<BinaryTreeNode, TReturn> visitor) =>
                        Accept(visitor);

                    public TReturn Accept<TReturn>(
                        IVisitor<Number, TReturn> visitor) =>
                        visitor.Visit(this);
                }
            }
        }
    }
}
";


    public static IEnumerable<object[]> TestData => new List<object[]>() {
        new object[] {INPUT_CODE_TWO_LELVEL_NEST, EXPECTED_CODE_TWO_LELVEL_NEST},
        new object[] {INPUT_CODE_THREE_LEVEL_NEST, EXPECTED_CODE_THREE_LEVELS_NEST},
        new object[] {INPUT_CODE_FOUR_LEVEL_NEST, EXPECTED_CODE_FOUR_LEVELS_NEST}
    };
}